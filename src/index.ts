import { app, BrowserView, BrowserWindow, globalShortcut, ipcMain, session, shell } from 'electron';
import ElectronStore from 'electron-store';
import { StoreSchema } from './shared/store/schema';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const YTM_VIEW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Create the persistent config store
const store = new ElectronStore<StoreSchema>({
  watch: true,
  defaults: {
    general: {
      hideToTrayOnClose: false,
      showNotificationOnSongChange: false,
      startOnBoot: false,
      startMinimized: false
    },
    playback: {
      continueWhereYouLeftOff: true
    },
    shortcuts: {
      playPause: '',
      next: '',
      previous: '',
      thumbsUp: '',
      thumbsDown: '',
      volumeUp: '',
      volumeDown: ''
    },
    state: {
      lastUrl: 'https://music.youtube.com/',
      lastVideoId: '',
      lastPlaylistId: ''
    }
  }
});
store.onDidAnyChange((newState, oldState) => {
  if (settingsWindow !== null) {
    settingsWindow.webContents.send('settings:stateChanged', newState, oldState);
  }

  if (ytmView !== null) {
    ytmView.webContents.send('settings:stateChanged', newState, oldState);
  }

  app.setLoginItemSettings({
    openAtLogin: store.get('general').startOnBoot
  });

  registerShortcuts();
})

let mainWindow: BrowserWindow = null;
let settingsWindow: BrowserWindow = null;
let ytmView: BrowserView = null;

// Shortcut registration
function registerShortcuts() {
  const shortcuts = store.get('shortcuts');

  globalShortcut.unregisterAll();

  if (shortcuts.playPause) {
    globalShortcut.register(shortcuts.playPause, () => {
      if (ytmView) {
        ytmView.webContents.send('shortcut:triggered', 'playPause');
      }
    });
  }

  if (shortcuts.next) {
    globalShortcut.register(shortcuts.next, () => {
      if (ytmView) {
        ytmView.webContents.send('shortcut:triggered', 'next');
      }
    });
  }

  if (shortcuts.previous) {
    globalShortcut.register(shortcuts.previous, () => {
      if (ytmView) {
        ytmView.webContents.send('shortcut:triggered', 'previous');
      }
    });
  }

  if (shortcuts.thumbsUp) {
    globalShortcut.register(shortcuts.thumbsUp, () => {
      if (ytmView) {
        ytmView.webContents.send('shortcut:triggered', 'thumbsUp');
      }
    });
  }

  if (shortcuts.thumbsDown) {
    globalShortcut.register(shortcuts.thumbsDown, () => {
      if (ytmView) {
        ytmView.webContents.send('shortcut:triggered', 'thumbsDown');
      }
    });
  }

  if (shortcuts.volumeUp) {
    globalShortcut.register(shortcuts.volumeUp, () => {
      if (ytmView) {
        ytmView.webContents.send('shortcut:triggered', 'volumeUp');
      }
    });

  }

  if (shortcuts.volumeDown) {
    globalShortcut.register(shortcuts.volumeDown, () => {
      if (ytmView) {
        ytmView.webContents.send('shortcut:triggered', 'volumeDown');
      }
    });
  }
}

// Functions which call to mainWindow renderer
function sendMainWindowStateIpc() {
  if (mainWindow !== null) {
    mainWindow.webContents.send('mainWindow:stateChanged', {
      minimized: mainWindow.isMinimized(),
      maximized: mainWindow.isMaximized()
    })
  }
}

// Functions with call to ytmView renderer
function ytmViewNavigated() {
  if (ytmView !== null) {
    store.set('state.lastUrl', ytmView.webContents.getURL());
    ytmView.webContents.send('ytmView:navigationStateChanged', {
      canGoBack: ytmView.webContents.canGoBack(),
      canGoForward: ytmView.webContents.canGoForward(),
    })
  }
}

// Functions which call to settingsWindow renderer
function sendSettingsWindowStateIpc() {
  if (settingsWindow !== null) {
    settingsWindow.webContents.send('settingsWindow:stateChanged', {
      minimized: settingsWindow.isMinimized(),
      maximized: settingsWindow.isMaximized()
    })
  }
}

const createOrShowSettingsWindow = (): void => {
  if (mainWindow === null) {
    return;
  }

  if (settingsWindow !== null) {
    settingsWindow.focus();
    return;
  }

  // Create the browser window.
  settingsWindow = new BrowserWindow({
    width: 800,
    height: 600,
    minimizable: false,
    maximizable: false,
    resizable: false,
    frame: false,
    parent: mainWindow,
    modal: true,
    webPreferences: {
      sandbox: true,
      contextIsolation: true,
      preload: SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // Attach events to main window
  settingsWindow.on('maximize', sendSettingsWindowStateIpc)
  settingsWindow.on('unmaximize', sendSettingsWindowStateIpc)
  settingsWindow.on('minimize', sendSettingsWindowStateIpc)
  settingsWindow.on('restore', sendSettingsWindowStateIpc)

  settingsWindow.once('closed', () => {
    settingsWindow = null;
  });

  // and load the index.html of the app.
  settingsWindow.loadURL(SETTINGS_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (process.env.NODE_ENV === 'development') {
    settingsWindow.webContents.openDevTools({
      mode: 'detach'
    });
  }
};

const createMainWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1280,
    height: 720,
    frame: false,
    icon: './assets/icons/ytmd.png',
    webPreferences: {
      sandbox: true,
      contextIsolation: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // Create the YouTube Music view
  ytmView = new BrowserView({
    webPreferences: {
      sandbox: true,
      contextIsolation: true,
      partition: 'persist:ytmview',
      preload: YTM_VIEW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  let navigateDefault = true;

  const continueWhereYouLeftOff: boolean = store.get('playback.continueWhereYouLeftOff');
  if (continueWhereYouLeftOff) {
    const lastUrl: string = store.get('state.lastUrl');
    if (lastUrl) {
      if (lastUrl.startsWith("https://music.youtube.com/")) {
        ytmView.webContents.loadURL(lastUrl);
        navigateDefault = false;
      }
    }
  }

  if (navigateDefault) {
    ytmView.webContents.loadURL('https://music.youtube.com/');
    store.set('state.lastUrl', 'https://music.youtube.com/')
  }

  // Attach events to ytm view
  ytmView.webContents.on('will-navigate', (event, url) => {
    if (!url.startsWith("https://accounts.google.com/") && !url.startsWith("https://accounts.youtube.com/") && !url.startsWith("https://music.youtube.com/") && !url.startsWith("https://www.youtube.com/signin")) {
      event.preventDefault();
      shell.openExternal(url);
    }
  });
  ytmView.webContents.on('did-navigate', ytmViewNavigated);
  ytmView.webContents.on('did-navigate-in-page', ytmViewNavigated);

  ytmView.webContents.setWindowOpenHandler((details) => {
    shell.openExternal(details.url);
    return {
      action: 'deny'
    }
  });

  // Attach events to main window
  mainWindow.on('resize', () => {
    setTimeout(() => {
      if (mainWindow.isMaximized()) {
        ytmView.setBounds({
          x: 0,
          y: 36,
          width: mainWindow.getBounds().width,
          height: mainWindow.getBounds().height - 52,
        });
      } else {
        ytmView.setBounds({
          x: 0,
          y: 36,
          width: mainWindow.getBounds().width,
          height: mainWindow.getBounds().height - 36,
        });
      }
    });
  });

  mainWindow.on('maximize', sendMainWindowStateIpc)
  mainWindow.on('unmaximize', sendMainWindowStateIpc)
  mainWindow.on('minimize', sendMainWindowStateIpc)
  mainWindow.on('restore', sendMainWindowStateIpc)

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools({
      mode: 'detach'
    });
    ytmView.webContents.openDevTools({
      mode: 'detach'
    });
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  // Handle main window ipc
  ipcMain.on('mainWindow:minimize', () => {
    if (mainWindow !== null) {
      mainWindow.minimize();
    }
  });

  ipcMain.on('mainWindow:maximize', () => {
    if (mainWindow !== null) {
      mainWindow.maximize();
    }
  });

  ipcMain.on('mainWindow:restore', () => {
    if (mainWindow !== null) {
      mainWindow.restore();
    }
  });

  ipcMain.on('mainWindow:close', () => {
    if (mainWindow !== null) {
      mainWindow.close();
    }
  });

  // Handle settings window ipc
  ipcMain.on('settingsWindow:open', () => {
    createOrShowSettingsWindow();
  });

  ipcMain.on('settingsWindow:minimize', () => {
    if (settingsWindow !== null) {
      settingsWindow.minimize();
    }
  });

  ipcMain.on('settingsWindow:maximize', () => {
    if (settingsWindow !== null) {
      settingsWindow.maximize();
    }
  });

  ipcMain.on('settingsWindow:restore', () => {
    if (settingsWindow !== null) {
      settingsWindow.restore();
    }
  });

  ipcMain.on('settingsWindow:close', () => {
    if (settingsWindow !== null) {
      settingsWindow.close();
    }
  });

  // Handle ytm view ipc
  ipcMain.on('ytmView:loaded', () => {
    if (ytmView !== null && mainWindow !== null) {
      mainWindow.addBrowserView(ytmView);
      ytmView.setBounds({
        x: 0,
        y: 36,
        width: mainWindow.getBounds().width,
        height: mainWindow.getBounds().height - 36,
      });
    }
  });

  ipcMain.on('ytmView:videoProgressChanged', (event, progress) => {
    // TODO
  });

  ipcMain.on('ytmView:videoStateChanged', (event, state) => {
    // ytm state mapping definitions
    // -1 -> Unknown (Only happens when loading new songs - could be no video data/video data resetting)
    // 1 -> Playing
    // 2 -> Paused
    // 3 -> Buffering
    // 5 -> Unknown (Only happens when loading new songs - unsure what this is for)

    // ytm state flow
    // Play Button Click 
    //   -1 -> 5 -> -1 -> 3 -> 1
    // First Play Button Click (Only happens when the player is first loaded)
    //   -1 -> 3 -> 1
    // Previous/Next Song Click 
    //   -1 -> 5 -> -1 -> 5 -> -1 -> 3 -> 1

    // TODO
  });

  ipcMain.on('ytmView:videoDataChanged', (event, videoDetails, playlistId) => {
    store.set('state.lastVideoId', videoDetails.videoId);
    store.set('state.lastPlaylistId', playlistId);
  });

  // Handle settings store ipc
  ipcMain.on('settings:set', (event, key: string, value?: string) => {
    store.set(key, value);
  });

  ipcMain.handle('settings:get', (event, key: string) => {
    return store.get(key);
  });

  // Create the permission handlers
  session.fromPartition('persist:ytmview').setPermissionRequestHandler((webContents, permission, callback) => {
    return callback(false);
  });

  // Register global shortcuts
  registerShortcuts()

  createMainWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createMainWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
